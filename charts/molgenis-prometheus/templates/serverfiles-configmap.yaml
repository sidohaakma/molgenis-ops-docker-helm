apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-serverfiles-configmap
data:
  alerts: |
    groups:
      {{ if eq .Values.environment "production" -}}
      - name: virtualmachines
        rules:
          - alert: InstanceDown
            expr: up == 0
            annotations:
              severity: "ERROR"
              summary: {{ printf "\"Instance or node_exporter Down\"" }}
              message: {{ printf "\"Instance or node_exporter of {{$labels.instance}} is down\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: OutOfMemory
            expr: node_memory_MemFree / node_memory_MemTotal * 100 < 10
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Out of memory (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualNetworkThroughputIn
            expr: sum by (instance) (irate(node_network_receive_bytes[2m])) / 1024 / 1024 > 100
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual network throughput in (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Host network interfaces are probably receiving too much data (> 100 MB/s)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualNetworkThroughputOut
            expr: sum by (instance) (irate(node_network_transmit_bytes[2m])) / 1024 / 1024 > 100
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual network throughput out (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Host network interfaces are probably sending too much data (> 100 MB/s)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualDiskReadRate
            expr: sum by (instance) (irate(node_disk_read_bytes[2m])) / 1024 / 1024 > 50
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual disk read rate (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk is probably reading too much data (> 50 MB/s)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualDiskWriteRate
            expr: sum by (instance) (irate(node_disk_written_bytes[2m])) / 1024 / 1024 > 50
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual disk write rate (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk is probably writing too much data (> 50 MB/s)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: OutOfDiskSpace
            expr: node_filesystem_free_bytes{mountpoint ="/rootfs"} / node_filesystem_size_bytes{mountpoint ="/rootfs"} * 100 < 10
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Out of disk space (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk is almost full (< 10% left)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: OutOfInodes
            expr: node_filesystem_files_free{mountpoint ="/rootfs"} / node_filesystem_files{mountpoint ="/rootfs"} * 100 < 10
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Out of inodes (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk is almost running out of available inodes (< 10% left)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualDiskReadLatency
            expr: rate(node_disk_read_time_ms[1m]) / rate(node_disk_reads_completed[1m]) > 100
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual disk read latency (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk latency is growing (read operations > 100ms)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: UnusualDiskWriteLatency
            expr: rate(node_disk_write_time_ms[1m]) / rate(node_disk_writes_completed[1m]) > 100
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Unusual disk write latency (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Disk latency is growing (write operations > 100ms)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: HighCpuLoad
            expr: 100 - (avg by(instance) (irate(node_cpu{mode="idle"}[5m])) * 100) > 80
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"High CPU load (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"CPU load is > 80%\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: ContextSwitching
            expr: rate(node_context_switches[5m]) > 1000
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Context switching (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Context switching is growing on node (> 1000 / s)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          - alert: SwapIsFillingUp
            expr: (1 - (node_memory_SwapFree / node_memory_SwapTotal)) * 100 > 80
            for: 5m
            annotations:
              severity: "WARN"
              summary: {{ printf "\"Swap is filling up (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Swap is filling up (>80%)\n  VALUE = {{ $value }}\nBranch: {{ $labels.branch }}\nProject: {{ $labels.project }}\nDTAP: {{ $labels.dtap }}\"" }}
          {{ end -}}
      - name: nodes
        rules:
          - alert: "Node Down"
            expr: up{job="kubernetes-nodes"} == 0
            annotations:
              miqTarget: "ContainerNode"
              severity: "ERROR"
              summary: {{ printf "\"Node DOWN on rancher cluster\"" }}
              message: {{ printf "\"Node {{$labels.instance}} is down\"" }}
      - name: pods
        rules:
          - alert: "Pod OOMKilled"
            expr: kube_pod_container_status_terminated_reason{reason='OOMKilled'} == 1
            annotations:
              severity: "WARN"
              summary: {{ printf "\"OOMKilled\"" }}
              message: {{ printf "\"Pod {{$labels.container}} in namespace {{$labels.namespace}} got OOMKilled.\"" }}
          - alert: KubernetesMemorypressure
            expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
            for: 5m
            labels:
              severity: "ERROR"
            annotations:
              summary: {{ printf "\"Kubernetes MemoryPressure (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: KubernetesDiskpressure
            expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
            for: 5m
            labels:
              severity: "ERROR"
            annotations:
              summary: {{ printf "\"Kubernetes DiskPressure (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: KubernetesOutofdisk
            expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
            for: 5m
            labels:
              severity: "ERROR"
            annotations:
              summary: {{ printf "\"Kubernetes OutOfDisk (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: KubernetesJobFailed
            expr: kube_job_status_failed > 0
            for: 5m
            labels:
              severity: "WARN"
            annotations:
              summary: {{ printf "\"Kubernetes Job failed (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"Job {{$labels.namespace}}/{{$labels.exported_job}} failed to complete\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: KubernetesCronjobSuspended
            expr: kube_cronjob_spec_suspend != 0
            for: 5m
            labels:
              severity: "INFO"
            annotations:
              summary: {{ printf "\"Kubernetes CronJob suspended (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"CronJob {{ $labels.namespace }}/{{ $labels.cronjob }} is suspended\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: KubernetesPersistentvolumeclaimPending
            expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
            for: 5m
            labels:
              severity: "WARN"
            annotations:
              summary: {{ printf "\"Kubernetes PersistentVolumeClaim pending (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"PersistentVolumeClaim {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: VolumeOutOfDiskSpace
            expr: kubelet_volume_stats_available_bytes / kubelet_volume_stats_capacity_bytes * 100 < 10
            for: 5m
            labels:
              severity: "WARN"
            annotations:
              summary: {{ printf "Volume out of disk space (instance {{ $labels.instance }})" }}
              message: {{ printf "Volume is almost full (< 10% left)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}" }}
          - alert: VolumeFullInFourDays
            expr: 100 * (kubelet_volume_stats_available_bytes / kubelet_volume_stats_capacity_bytes) < 15 and predict_linear(kubelet_volume_stats_available_bytes[6h], 4 * 24 * 3600) < 0
            for: 5m
            labels:
              severity: "ERROR"
            annotations:
              summary: {{ printf "\"Volume full in four days (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"{{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is expected to fill up within four days. Currently {{ $value | humanize }}% is available.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
          - alert: StatefulsetDown
            expr: (kube_statefulset_status_replicas_ready / kube_statefulset_status_replicas_current) != 1
            for: 5m
            labels:
              severity: "ERROR"
            annotations:
              summary: {{ printf "\"StatefulSet down (instance {{ $labels.instance }})\"" }}
              message: {{ printf "\"A StatefulSet went down\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}\"" }}
  rules: | 
    {}
  prometheus.yml: |
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
      {{ if eq .Values.environment "production" -}}
      - job_name: 'masterBranchNodes'
        file_sd_configs:
          - files:
            - /etc/configProm/*TargetsAcquired.yml
      - job_name: '30BranchNodes'
        file_sd_configs:
          - files:
            - /etc/configProm/30TargetsAcquired.yml
      - job_name: '20BranchNodes'
        file_sd_configs:
          - files:
            - /etc/configProm/20TargetsAcquired.yml
      - job_name: '10BranchNodes'
        file_sd_configs:
          - files:
            - /etc/configProm/10TargetsAcquired.yml
      - job_name: '01BranchNodes'
        file_sd_configs:
          - files:
            - /etc/configProm/01TargetsAcquired.yml
      {{ end -}}
      {{ if eq .Values.environment "development" -}}
      - job_name: jenkins
        metrics_path: '/prometheus/'
        scheme: http
        static_configs:
          - targets: ['molgenis-jenkins.molgenis-jenkins.svc.devcluster.local:80']
          #- targets: ['jenkins.dev.molgenis.org:443']
      {{ end -}}